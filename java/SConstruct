# -*- python -*-
import glob, os.path

env = Environment(CXXFLAGS = ['-g', '-O', '-Wall'],
                  JAVACLASSPATH = '/usr/share/java/json-lib.jar',
                  CPPPATH = ['/usr/lib/jvm/java-7-openjdk-amd64/include',
                             '/usr/lib/jvm/java-7-openjdk-amd64/include/linux'],
                  PROGSUFFIX = '.exe')

dn = os.path.join('com', 'wl', 'www')
env.Java(target = 'classes', source = 'sources')
env.JavaH(target = 'jni', source =
          map(lambda classname: os.path.join('classes', 'com', 'wl', 'www', classname),
              ['FreezeDocument4', 'FreezeDocument8', 'RapidDocument']))
env.SharedLibrary(os.path.join('jni', 'freeze'), os.path.join('jni', 'freeze-jni.cpp'))
env.Program(os.path.join('jni', 'showsz'), [os.path.join('jni', 'showsz.cpp')])
env.Program(os.path.join('jni', 'tstfreeze0'), [os.path.join('jni', 'tstfreeze0.cpp')])
env.Program(os.path.join('jni', 'tstfreeze1'), [os.path.join('jni', 'tstfreeze1.cpp')])
env.Program(os.path.join('jni', 'tstfreeze2'), [os.path.join('jni', 'tstfreeze2.cpp')])
env.Program(os.path.join('jni', 'tstfreeze3'), [os.path.join('jni', 'tstfreeze3.cpp')])

pyenv = env.Clone()
pyenv['SHLIBPREFIX'] = ''
pyenv.ParseConfig('/data/python-3.5.2/bin/python3-config --cflags --ldflags')
pyenv['CCFLAGS'].remove('-Wstrict-prototypes')
pyenv.SharedLibrary(os.path.join('jni', '_freeze'), [os.path.join('jni', 'pyfreeze.cpp')])
